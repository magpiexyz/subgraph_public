type TrackedMLRT @entity(immutable: true) {
  id: Bytes!
  underlying: Bytes!
  strategy: Bytes!
  addedTimestamp: BigInt!
}

type PoolInfo @entity(immutable: false) {
  id: Bytes! # hash(group, lpToken)
  group: Bytes!
  lpToken: LpInfo!
  totalShares: BigInt!
  totalUnclaimedShares: BigInt!
  accEigenLayerPointPerShare: BigInt!
  accEigenpiePointPerShare: BigInt!
  lastRewardTimestamp: BigInt!
}

type UserBalanceInfo @entity {
  id: Bytes! # hash(group, lpToken, user)
  group: Bytes!
  lpToken: LpInfo!
  poolInfo: PoolInfo!
  user: UserInfo!
  shares: BigInt!
  unclaimedShares: BigInt!
  eigenLayerPointsDebt: BigInt!
  eigenpiePointsDebt: BigInt!
}

type LpInfo @entity(immutable: false) {
  id: Bytes! # hash(lpToken)
  lpToken: Bytes!
  eigenLayerPointsPerSec: BigInt!
  eigenpiePointsPerSec: BigInt!
  pools: [PoolInfo!]! @derivedFrom(field: "lpToken")
  priceToETH: BigInt!
  mLrtRatio: BigInt!
}

type UserInfo @entity(immutable: false) {
  id: Bytes! # hash(user)
  user: Bytes!
  group: GroupInfo!
  userBalances: [UserBalanceInfo!]! @derivedFrom(field: "user")
  referrer: Bytes!
  referralCount: BigInt!
  eigenLayerPoints: BigInt!
  eigenpiePoints: BigInt!
  eigenpieReferralPoints: BigInt!
}

type GroupInfo @entity(immutable: false) {
  id: Bytes! # hash(group)
  group: Bytes!
  groupBoost: BigInt!
  members: [UserInfo!]! @derivedFrom(field: "group")
  totalTvl: BigInt!
}

type GlobalInfo @entity(immutable: false) {
  id: Bytes! # hash(bytes zero)
  globalBoost: BigInt!
  lastDailyUpdateAllPoolsTimestamp: BigInt!
  totalTvl: BigInt!
  totalEigenpiePoints: BigInt!
  totalEigenLayerPoints: BigInt!
}